set(LIBTORCH_VERSION 2.0.1)

if (NOT WIN32)
    set(TORCH_BUILD_TYPE "")
else()
    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
        set(TORCH_BUILD_TYPE "-debug")
    else()
        set(TORCH_BUILD_TYPE "-release")
    endif()
endif()

option(LIBTORCH_ROOTDIR "libtorch root dir")
set(LIBTORCH_ROOTDIR ${CMAKE_CURRENT_SOURCE_DIR}/modules/libtorch-${LIBTORCH_VERSION}${TORCH_BUILD_TYPE}/)

if(EXISTS ${LIBTORCH_ROOTDIR})
    message(STATUS "Libtorch-Runtime library found at ${LIBTORCH_ROOTDIR}")
else()
    file(MAKE_DIRECTORY ${LIBTORCH_ROOTDIR}/)
    message(STATUS "Libtorch library not found - downloading pre-built library.")

    if(WIN32)
        if(CMAKE_BUILD_TYPE STREQUAL "Debug")
            set(LIB_LIBTORCH_PRE_BUILD_LIB_NAME "libtorch-win-shared-with-deps-debug-${LIBTORCH_VERSION}%2Bcpu")
        else()
            set(LIB_LIBTORCH_PRE_BUILD_LIB_NAME "libtorch-win-shared-with-deps-${LIBTORCH_VERSION}%2Bcpu")
        endif()
        set(LIB_LIBTORCH_PRE_BUILD_LIB_TYPE "zip")
    endif()

    if(UNIX AND NOT APPLE)
        set(LIB_LIBTORCH_PRE_BUILD_LIB_NAME "libtorch-cxx11-abi-shared-with-deps-${LIBTORCH_VERSION}%2Bcpu")
        set(LIB_LIBTORCH_PRE_BUILD_LIB_TYPE "zip")
    endif()

    if(UNIX AND APPLE)
        message(STATUS "BUILD_ARCHITECTURE: ${BUILD_ARCHITECTURE}")
        if (BUILD_ARCHITECTURE STREQUAL "x86_64")
            set(LIB_LIBTORCH_PRE_BUILD_LIB_NAME "libtorch-macos-${LIBTORCH_VERSION}")
            set(LIB_LIBTORCH_PRE_BUILD_LIB_TYPE "zip")
        elseif (BUILD_ARCHITECTURE STREQUAL "arm64")
            set(LIB_LIBTORCH_PRE_BUILD_LIB_NAME "libtorch-${LIBTORCH_VERSION}-macOS-arm64")
            set(LIB_LIBTORCH_PRE_BUILD_LIB_TYPE "zip")
            set(LIBTORCH_URL https://github.com/faressc/libtorch-cpp-lib/releases/download/v.0.0.0/${LIB_LIBTORCH_PRE_BUILD_LIB_NAME}.${LIB_LIBTORCH_PRE_BUILD_LIB_TYPE})
        else()
            if (CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "x86_64")
                set(LIB_LIBTORCH_PRE_BUILD_LIB_NAME "libtorch-macos-${LIBTORCH_VERSION}")
                set(LIB_LIBTORCH_PRE_BUILD_LIB_TYPE "zip")
            elseif(CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "arm64")
                set(LIB_LIBTORCH_PRE_BUILD_LIB_NAME "libtorch-${LIBTORCH_VERSION}-macOS-arm64")
                set(LIB_LIBTORCH_PRE_BUILD_LIB_TYPE "zip")
                set(LIBTORCH_URL https://github.com/faressc/libtorch-cpp-lib/releases/download/v.0.0.0/${LIB_LIBTORCH_PRE_BUILD_LIB_NAME}.${LIB_LIBTORCH_PRE_BUILD_LIB_TYPE})
            else()
                message(FATAL_ERROR "BUILD_ARCHITECTURE and CMAKE_HOST_SYSTEM_PROCESSOR not defined.")
            endif()
        endif()
    endif()

    if (NOT DEFINED LIBTORCH_URL)
        set(LIBTORCH_URL https://download.pytorch.org/libtorch/cpu/${LIB_LIBTORCH_PRE_BUILD_LIB_NAME}.${LIB_LIBTORCH_PRE_BUILD_LIB_TYPE})
    endif()

    message(STATUS "LibTorchURL: ${LIBTORCH_URL}")

    set(LIBTORCH_PATH ${CMAKE_BINARY_DIR}/import/${LIB_LIBTORCH_PRE_BUILD_LIB_NAME}.${LIB_LIBTORCH_PRE_BUILD_LIB_TYPE})

    file(DOWNLOAD ${LIBTORCH_URL} ${LIBTORCH_PATH} STATUS LIBTORCH_DOWNLOAD_STATUS SHOW_PROGRESS)
    list(GET LIBTORCH_DOWNLOAD_STATUS 0 LIBTORCH_DOWNLOAD_STATUS_NO)

    file(ARCHIVE_EXTRACT
            INPUT ${CMAKE_BINARY_DIR}/import/${LIB_LIBTORCH_PRE_BUILD_LIB_NAME}.${LIB_LIBTORCH_PRE_BUILD_LIB_TYPE}
            DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/modules/libtorch-${LIBTORCH_VERSION}${TORCH_BUILD_TYPE}/)

    if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/modules/libtorch-${LIBTORCH_VERSION}${TORCH_BUILD_TYPE}/libtorch)
        file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/modules/libtorch-${LIBTORCH_VERSION}${TORCH_BUILD_TYPE}/libtorch/ DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/modules/libtorch-${LIBTORCH_VERSION}${TORCH_BUILD_TYPE}/)
        file(REMOVE_RECURSE ${CMAKE_CURRENT_SOURCE_DIR}/modules/libtorch-${LIBTORCH_VERSION}${TORCH_BUILD_TYPE}/libtorch/)
    else()
        file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/modules/libtorch-${LIBTORCH_VERSION}${TORCH_BUILD_TYPE}/libtorch-${LIBTORCH_VERSION}${TORCH_BUILD_TYPE}/ DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/modules/libtorch-${LIBTORCH_VERSION}${TORCH_BUILD_TYPE}/)
        file(REMOVE_RECURSE ${CMAKE_CURRENT_SOURCE_DIR}/modules/libtorch-${LIBTORCH_VERSION}${TORCH_BUILD_TYPE}/libtorch-${LIBTORCH_VERSION}${TORCH_BUILD_TYPE}/)
    endif()

    if(LIBTORCH_DOWNLOAD_STATUS_NO)
        message(STATUS "Pre-built library not downloaded. Error occurred, try again and check cmake/SetupLibTorch.cmake")
        file(REMOVE_RECURSE ${CMAKE_CURRENT_SOURCE_DIR}/modules/libtorch-${LIBTORCH_VERSION}${TORCH_BUILD_TYPE})
        file(REMOVE ${LIBTORCH_PATH})
    else()
        message(STATUS "Linking downloaded LibTorch pre-built library.")
    endif()
endif()

if (MSVC)
    if (EXISTS "C:/Program Files (x86)/Intel/oneAPI/mkl/latest/lib/intel64")
        link_directories("C:/Program Files (x86)/Intel/oneAPI/mkl/latest/lib/intel64")
        get_directory_property(_my_link_dirs LINK_DIRECTORIES)
        message(STATUS "Intel MKL library found at ${_my_link_dirs}")
    endif()
endif (MSVC)

list(APPEND CMAKE_PREFIX_PATH ${LIBTORCH_ROOTDIR})
find_package(Torch REQUIRED)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${TORCH_CXX_FLAGS}")

# Suppress warnings by setting -w flag as a linker option
target_link_options(torch INTERFACE "-w")
target_link_options(torch_library INTERFACE "-w")
